import requests
import logging
import json

from lxml import html
from typing import List
from kickstarter_project import KickstarterProject
from datetime import datetime, timedelta

kickstarter_rpg_query: str = "https://www.kickstarter.com/discover/advanced?state=live&term=rpg&category_id=34&sort=newest&page="
now: datetime = datetime.utcnow()


def get_next_page(last_page: int) -> str:
    """Given the last page number fetched; fetch the next page"""
    current_page: int = last_page + 1
    logging.info("Fetching Page {}".format(current_page))

    url: str = kickstarter_rpg_query + str(current_page)
    response = requests.get(url)
    if response.ok:
        return response.content
    else:
        return None


def get_projects_from_page(page: str) -> List[dict]:
    """Scrape the webpage passed in for projects

    Using methods learned from https://docs.python-guide.org/scenarios/scrape/
    """
    xml_tree = html.fromstring(page)
    project_divs = xml_tree.xpath('//div/@data-project')  # get all the div tags containing data-project attributes
    project_dicts: List[dict] = []

    for project in project_divs:
        new_dict = json.loads(project)
        project_dicts.append(new_dict)

    return project_dicts


def print_last_weeks_new_projects(projects: List[KickstarterProject]):
    """Iterate though all the projects and print out the table for those projects that were created in the last week

    :param projects: the list of all projects scraped
    :return:
    """
    one_week_ago: datetime = now - timedelta(days=7)
    new_projects = [project for project in projects if project.launched_epoch >= one_week_ago]

    if len(new_projects) > 0:
        print('The following projects are NEW from the past week:')
        print('')  # without this break the table does not display correctly
        print(KickstarterProject.print_header())
        print(KickstarterProject.print_header_divider())

        for project in new_projects:
            print(project.to_markdown_string())
    else:
        print('No new projects in the last week')
        print('')  # without this break the table does not display correctly


def print_projects_ending_next_week(projects: List[KickstarterProject]):
    """Iterate though all the projects and print out the table for those projects that are ending in the next week

    :param projects: the list of all projects scraped
    :return:
    """
    next_week: datetime = now + timedelta(days=7)
    ending_projects = [project for project in projects if project.deadline_epoch < next_week]

    if len(ending_projects) > 0:
        print('The following projects are ENDING in the next week:')
        print('')  # without this break the table does not display correctly
        print(KickstarterProject.print_header())
        print(KickstarterProject.print_header_divider())

        for project in ending_projects:
            print(project.to_markdown_string())
    else:
        print('No projects ending in the next week')
        print('')


def main():
    parsed_projects: List[KickstarterProject] = []
    page_count: int = 0
    last_page_project_count:int = 1 # a white lie to allow processing of the first loop

    while last_page_project_count > 0:
        page: str = get_next_page(page_count)
        projects: List[dict] = get_projects_from_page(page)
        last_page_project_count = len(projects)

        if last_page_project_count > 0:
            page_count += 1
            for project in projects:
                parsed_projects.append(KickstarterProject(project))

    logging.info("Processed {} pages for {} projects".format(page_count, len(parsed_projects)))

    print_projects_ending_next_week(parsed_projects)
    print('')
    print_last_weeks_new_projects(parsed_projects)
    print('')  # without this break the table does not display correctly
    print('This post generated by [KickstarterRPGReport](https://github.com/agearhart/KickstarterRPGReport)')


if __name__ == "__main__":
    main()
